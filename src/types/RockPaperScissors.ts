/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  OnEvent,
  PromiseOrValue,
  TypedEvent,
  TypedEventFilter,
  TypedListener,
} from "./common";

export interface RockPaperScissorsInterface extends utils.Interface {
  functions: {
    "bettingAmount()": FunctionFragment;
    "commit(bytes32)": FunctionFragment;
    "getHash(string,string)": FunctionFragment;
    "reveal(string)": FunctionFragment;
    "tokenAddress()": FunctionFragment;
    "userA()": FunctionFragment;
    "userB()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "bettingAmount"
      | "commit"
      | "getHash"
      | "reveal"
      | "tokenAddress"
      | "userA"
      | "userB"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "bettingAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "commit",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getHash",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "reveal",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "userA", values?: undefined): string;
  encodeFunctionData(functionFragment: "userB", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "bettingAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "commit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getHash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reveal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userA", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userB", data: BytesLike): Result;

  events: {};
}

export interface RockPaperScissors extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RockPaperScissorsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bettingAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    commit(
      _hash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getHash(
      option: PromiseOrValue<string>,
      salt: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    reveal(
      salt: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokenAddress(overrides?: CallOverrides): Promise<[string]>;

    userA(overrides?: CallOverrides): Promise<[string]>;

    userB(overrides?: CallOverrides): Promise<[string]>;
  };

  bettingAmount(overrides?: CallOverrides): Promise<BigNumber>;

  commit(
    _hash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getHash(
    option: PromiseOrValue<string>,
    salt: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  reveal(
    salt: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokenAddress(overrides?: CallOverrides): Promise<string>;

  userA(overrides?: CallOverrides): Promise<string>;

  userB(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    bettingAmount(overrides?: CallOverrides): Promise<BigNumber>;

    commit(
      _hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    getHash(
      option: PromiseOrValue<string>,
      salt: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    reveal(
      salt: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenAddress(overrides?: CallOverrides): Promise<string>;

    userA(overrides?: CallOverrides): Promise<string>;

    userB(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    bettingAmount(overrides?: CallOverrides): Promise<BigNumber>;

    commit(
      _hash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getHash(
      option: PromiseOrValue<string>,
      salt: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reveal(
      salt: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    userA(overrides?: CallOverrides): Promise<BigNumber>;

    userB(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    bettingAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    commit(
      _hash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getHash(
      option: PromiseOrValue<string>,
      salt: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reveal(
      salt: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokenAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userA(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userB(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
